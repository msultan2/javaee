/*
    System: BlueTruth Outstation
    Language/Build: MS VC 2008 / Linux GCC 4.2+
    Description:
    Modification History:

    Date        Who     SCJS No     Remarks
    31/05/2013  RG      001         V1.00 First Issue

 */

#ifndef _OUTSTATION_MAINFRAME_H_
#define _OUTSTATION_MAINFRAME_H_

//!
//! @file
//! Subclass of MainFrame, which is generated by wxFormBuilder.
//!
#include "wxFormBuilderClasses.h"
#include "keypresshandler.h"
#include "iobserver.h"

#include "datacontainer.h"
#include "mutex.h"
#include "queuedetector.h"
#include "types.h"

#include <boost/shared_ptr.hpp>
#include <vector>
#include <wx/event.h>
#include <wx/bitmap.h>
#include <wx/dc.h>

#include <wx/listctrl.h>
#include <wx/timer.h>
#include <list>


namespace InStation
{
    class InStationHTTPClient;
    class ReverseSSHConnector;
}

namespace QueueDetection
{
    class QueueDetector;
}


namespace View
{

class OutStationConfigurationParameters;
class EventLogTable;
struct LogRecord;

class OutStationMainFrame :
    public MainFrame,
    public KeyPressHandler,
    public ::IObserver
{
public:
    //! Constructor
    OutStationMainFrame(wxWindow * parent, OutStationConfigurationParameters& configurationParameters);

    //! Destructor
    virtual ~OutStationMainFrame();

    void setup(
        boost::shared_ptr<InStation::InStationHTTPClient> pRetrieveConfigurationClient);

    void setup(
        boost::shared_ptr<InStation::InStationHTTPClient> pInStationClient,
        boost::shared_ptr<Model::DataContainer> pInStationDataContainer);

    void setup(
        boost::shared_ptr<InStation::ReverseSSHConnector> pInStationReverseSSHConnector);

    void setup(
        boost::shared_ptr<QueueDetection::QueueDetector> pQueueDetector);

    virtual void notifyOfStateChange(IObservable* observablePtr, const int index);

    void updateBlueToothDeviceCollection(const Model::DataContainer::TRemoteDeviceRecordCollection& remoteDeviceRecordCollection);
    void updateLocalBlueToothDevice(const Model::TLocalDeviceRecord& localDeviceRecord);
    void updateQueueDetectionView();
    void setBlueToothDiscoveryNotRunning();
    void setBlueToothDiscoveryRunning(const unsigned int blueToothInquiryDurationInSeconds);
    void restartBlueToothInquiryTimer(const unsigned int blueToothInquiryDurationInSeconds);
    void stopBlueToothInquiryTimer();

    void setInStationConnectionGaugeColour(const wxColour& colour);
    void setInStationConnectionGaugeLabel(const wxString& label);
    void setInStationNotRunning();
    void setInStationDisconnected();
    void setInStationConnecting();
    void setInStationConnected();
    void setInStationFromAddress(const wxString& text);
    void setInStationToAddress(const wxString& text);
    void setInStationToPort(const wxString& text);

    //void setSbcSshConnectionGaugeColour(const wxColour& colour);
    //void setSbcSshConnectionGaugeLabel(const wxString& label);
    //void setSbcEavConnectionGaugeColour(const wxColour& colour);
    //void setSbcEavConnectionGaugeLabel(const wxString& label);

    void setStatusBarConnectionLabel(const wxString& text, const size_t index);

    typedef std::list<boost::shared_ptr<LogRecord> > TLogRecordCollection;
    void addLogs(TLogRecordCollection& logRecordCollection);

    void updateCurrentTimeOnStatusBar();

    void setSizeAndPosition();

    void setMaximumNumberOfRowsInEventLogGrid(const unsigned int value) { m_maximumNumberOfRowsInEventLogGrid = value; }

    enum
    {
        eSTATUS_BAR_GENERAL_INDEX = 0,
        eSTATUS_BAR_BLUETOOTH_INQUIRY_TIME = 1,
        eSTATUS_BAR_BLUETOOTH_DEVICE_INDEX = 2,
        eSTATUS_BAR_INSTATION_INDEX = 3,
        eSTATUS_BAR_TIME_INDEX = 4,
        eSTATUS_BAR_SIZE
    };


    void OnProgressTimer(wxTimerEvent& ev);
    DECLARE_EVENT_TABLE()

private:
    //! default constructor. Not implemented
    OutStationMainFrame();
    //! copy constructor. Not implemented
    OutStationMainFrame(const OutStationMainFrame& rhs);
    //! copy assignment operator. Not implemented
    OutStationMainFrame& operator=(const OutStationMainFrame& rhs);

    virtual bool onKeyPressed(const wxKeyEvent& ev);

    // Handlers for MainFramex events.
    virtual void onClose( wxCloseEvent& ev );
    virtual void onIdle( wxIdleEvent& ev );
    virtual void onBrowse( wxCommandEvent& ev );
    virtual void onFileExit( wxCommandEvent& ev );
    virtual void onToolsSettings( wxCommandEvent& ev );
    virtual void onHelpAbout(wxCommandEvent& ev);

    virtual void onEventLogLeftClick( wxGridEvent& ev );
    virtual void onEventLogRightClick( wxGridEvent& ev );
    void onEventLogPopupGridClick(wxCommandEvent& ev);

    virtual void onButtonStartStopBlueToothDeviceDiscoveryClick( wxCommandEvent& ev );
    virtual void onButtonStartStopInstationClientClick( wxCommandEvent& ev );

	virtual void onSendRawJourneyTimeToInStationClick(wxCommandEvent& ev);
	virtual void onSendCongestionReportToInStationClick(wxCommandEvent& ev);
	virtual void onRetrieveConfigurationClick(wxCommandEvent& ev);
	virtual void onSendMessageToInStationClick(wxCommandEvent& ev);
	virtual void onStartInStationSSHConnectionClick(wxCommandEvent& ev);
	virtual void onStopInStationSSHConnectionClick(wxCommandEvent& ev);

    void updateApplicationTitle();

    void updateDeviceInquiryTimeOnStatusBar();

    //Other local methods

    //Private members:
    OutStationConfigurationParameters& m_configurationParameters;

    //Logging functionality
    int m_currentLogNumber;
    int m_maximumNumberOfRowsInEventLogGrid;
    int m_selectedRowOnEventLogGrid;

    //Log/event grid popup menu actions
    enum ESelectedEventLogAction
    {
        ID_Clear = 2000,
        ID_ChangeLogLevel
    };
    wxMenu* m_pEventLogPopupOnGrid;

    //Model components
    boost::shared_ptr<InStation::InStationHTTPClient> m_pRetrieveConfigurationClient;
    boost::shared_ptr<InStation::InStationHTTPClient> m_pInStationClient;
    boost::shared_ptr<InStation::ReverseSSHConnector> m_pInStationReverseSSHConnector;
    boost::shared_ptr<Model::DataContainer> m_pInStationDataContainer;
    boost::shared_ptr<QueueDetection::QueueDetector> m_pQueueDetector;

    wxDateTime m_dateTimeOnStatusbar;
    wxTimer m_timer;

    wxDateTime m_lastDeviceInquiryEndTime;
    wxTimeSpan m_deviceInquiryTimeOnStatusbar;
    wxTimer m_deviceInquiryTimer;
};

} //namespace

#endif // _OUTSTATION_MAINFRAME_H_
